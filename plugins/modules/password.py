#!/usr/bin/python
# -*- coding: utf-8 -*-
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type

DOCUMENTATION = '''
module: password
short_description: module to manage passwords
description:
  - Add, remove, enable or disable users
version_added: "7.0.0"
author:
  - "Markus Bergholz (@markuman)"
options:
  state:
    description:
      - When C(present), adds or updates the password.
      - When C(absent), removes the password.
    type: str
    choices: [ "present", "absent" ]
    default: present
  update_password:
    description:
      - When C(always), password will be always updated.
      - When C(on_create), password will only be set if
        it not exist already.
    type: str
    choices: [ "always", "on_create" ]
    default: on_create
  favorite:
    description:
      - Whether a password is mark as favorite or not.
    required: false
    type: bool
    default: false
  name:
    description:
      - Name represents the label of the password.
    required: true
    type: str
  notes:
    description:
      - Notes about the password.
    required: false
    type: str
  folder:
    description:
      - Location of the password.
    required: false
    type: str
  url:
    description:
      - Url related to the password.
    required: false
    type: str
  username:
    description:
      - Username related to the password.
    required: false
    type: str
  password:
    description:
      - The password itself.
      - If not provided, the password will be autogenerated
        by nextcloud password apps.
    required: false
    type: str
extends_documentation_fragment:
  - markuman.nextcloud.nextcloud.connectivity
notes:
  - Supports C(check_mode).
'''

EXAMPLES = '''
'''

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.markuman.nextcloud.plugins.module_utils.nextcloud import NextcloudHandler
from ansible_collections.markuman.nextcloud.plugins.module_utils.nextcloud import parameter_spects


def main():
    module = AnsibleModule(
        supports_check_mode=True,
        argument_spec=parameter_spects(dict(
            name=dict(required=True, type='str'),
            state=dict(type='str', choices=['present', 'absent'], default='present'),
            password=dict(required=False, type='str', no_log=True),
            # setting no_log=False on update_password avoids a false positive warning about not setting no_log
            update_password=dict(type='str', choices=['always', 'on_create'], default='on_create', no_log=False),
            username=dict(required=False, type='str'),
            url=dict(required=False, type='str'),
            notes=dict(required=False, type='str'),
            favorite=dict(required=False, type='bool', default=False),
            folder=dict(required=False, type='str')
        ))
    )
    module.params["details"] = True
    nc = NextcloudHandler(module.params, module.fail_json)

    name = module.params.get('name')
    password = module.params.get('password') or nc.fetch_generated_password()
    username = module.params.get('username')
    url = module.params.get('url')
    notes = module.params.get('notes')
    state = module.params.get('state')
    favorite = module.params.get('favorite')
    update_password = module.params.get('update_password')
    folder = module.params.get('folder')

    retval = nc.get_password(name)

    if state == 'present':
        if len(retval) == 1:
            # update password
            if password == retval[0].get('password'):
                module.exit_json(changed=False, password=retval)

            elif update_password == 'always' and password != retval[0].get('password'):
                obj = {
                    'id': retval[0].get('id'),
                    'password': password,
                    'label': name
                }

                if notes:
                    obj['notes'] = notes

                if username:
                    obj['username'] = username

                if url:
                    obj['url'] = url

                if favorite:
                    obj['favorite'] = favorite

                if not module.check_mode:
                    retval = nc.update_password(obj)

                module.exit_json(changed=True, password=retval)

            else:
                module.exit_json(changed=False, password=retval)

        elif len(retval) == 0:
            # create password
            obj = {
                'password': password,
                'label': name
            }

            if folder:
                if nc.get_passwords_folder(folder):
                    obj['folder'] = nc.get_passwords_folder(folder)
                else:
                    obj['folder'] = nc.create_passwords_folder(folder).get('id')

            if notes:
                obj['notes'] = notes

            if username:
                obj['username'] = username

            if url:
                obj['url'] = url

            if favorite:
                obj['favorite'] = favorite

            retval = {}
            if not module.check_mode:
                retval = nc.create_password(obj)

            module.exit_json(changed=True, password=retval)

        else:
            module.fail_json(msg='More than one password identifies. Cannot continue')

    elif state == 'absent':
        if len(retval) == 1:
            if not module.check_mode:
                obj = {
                    'id': retval[0].get('id')
                }
                retval = nc.delete_password(obj)
                module.exit_json(changed=True, password=retval)
            module.exit_json(changed=True, password={})
        elif len(retval) == 0:
            module.exit_json(changed=False, password={})
        else:
            module.fail_json(msg='More than one password identifies. Cannot continue')


if __name__ == '__main__':
    main()
